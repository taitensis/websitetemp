---
import BaseLayout from "../layouts/BaseLayout.astro";
import hero from "@/assets/hero.png";
import { makeT, DEFAULT_LOCALE, type Locale } from "@/i18n/ui";
const L = (Astro.currentLocale ?? DEFAULT_LOCALE) as Locale;
const tt = makeT(L);

import { Button, buttonVariants } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent } from "@/components/ui/card";

import { Typography } from "@/components/ui/typography";
import {
  collectTagCounts,
  getSortedRecipes,
  pickFeaturedRecipe,
  pickLatestRecipes,
  pickSeasonalRecipes,
  resolveQuickTags,
} from "@/lib/recipes";

// Pull every recipe once so downstream slices all share the same ordering.
const all = await getSortedRecipes();
const featured = pickFeaturedRecipe(all);
const latest = pickLatestRecipes(all, 6);
const quickTags = resolveQuickTags(all);
const seasonalList = pickSeasonalRecipes(all, new Date(), 4);
const tagCounts = collectTagCounts(all);

const baseUrl = (import.meta.env.BASE_URL || "/").replace(/\/+$/, "");
const applyBase = (src?: string | null) => (src && src.startsWith("/") ? `${baseUrl}${src}` : src ?? null);

const featuredImage = featured?.data.images?.[0];
const featuredMedia = {
  src: applyBase(featuredImage?.src ?? null),
  alt: featuredImage?.alt ?? featured?.data.title ?? "",
};

const latestCards = latest.map((entry) => {
  const image = entry.data.images?.[0];
  const total = entry.data.time?.total;
  return {
    slug: entry.slug,
    title: entry.data.title,
    duration: typeof total === "number" ? `${total} min` : "—",
    yield: entry.data.yield ?? "—",
    image: applyBase(image?.src ?? null),
    alt: image?.alt ?? entry.data.title,
  };
});
---

<BaseLayout
  title="Home"
  description="Welcome to Nourriture Quotidienne, a collection of everyday recipes."
  bgUrl={hero}
>
  <!-- Hero -->
  <section class="mx-auto max-w-6xl space-y-6 px-6">
    <div>
      <Typography variant="h1">Nourriture Quotidienne</Typography>
      <Typography variant="lead">Everyday recipes, quick and cozy.</Typography>
    </div>

    <!-- Search form -->
    <div class="flex flex-col gap-4 sm:flex-row sm:items-center">
      <form action="/recipes" class="flex gap-2" role="search" aria-label="Site search">
        <Input
          type="search"
          name="q"
          placeholder="Search recipes…"
          aria-label="Search recipes"
          autoComplete="off"
          className="bg-card dark:bg-card"
        />
        <Button type="submit">Search</Button>
      </form>
      <a href="/recipes/random" class={buttonVariants({ variant: "secondary", size: "sm" })}>
        Surprise me
      </a>
    </div>

  <!-- Quick tags + random -->
  {quickTags.length > 0 && (
    <div class="flex flex-row gap-2" aria-label="Quick tags">
      {
        quickTags.map((t) => (
          <Button key={t} asChild variant="secondary" size="sm">
            <a href={`/recipes?tag=${t}`}>#{t}</a>
          </Button>
        ))
      }
    </div>
  )}
  </section>

  <!-- Featured -->
  {
    featured && (
      <section class="mx-auto mt-10 max-w-6xl space-y-4 px-6">
        <Typography variant="h2">Featured</Typography>
        <a href={`/recipes/${featured.slug}/`} class="block">
          <Card className="overflow-hidden">
            {featuredMedia.src && (
              <img
                class="aspect-[21/9] w-full object-cover"
                src={featuredMedia.src}
                alt={featuredMedia.alt}
                loading="lazy"
              />
            )}
            <CardContent className="p-4">
              <h3 class="text-lg font-semibold hover:underline">{featured.data.title}</h3>
            </CardContent>
          </Card>
        </a>
      </section>
    )
  }

  <!-- Latest -->
  <section class="mx-auto mt-10 max-w-6xl space-y-4 px-6">
    <Typography variant="h2">Latest recipes</Typography>
      <div class="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
        {
          latestCards.map((card) => (
            <a key={card.slug} href={`/recipes/${card.slug}/`} class="group block">
              <Card className="overflow-hidden">
                {card.image && (
                  <img
                    src={card.image}
                    class="aspect-[4/3] w-full object-cover transition group-hover:brightness-105"
                    alt={card.alt}
                    loading="lazy"
                  />
                )}
                <CardContent className="p-4">
                  <h3 class="font-semibold group-hover:underline">{card.title}</h3>
                  <p class="text-muted-foreground text-sm">
                    {card.duration} · {card.yield}
                  </p>
                </CardContent>
              </Card>
            </a>
          ))
        }
    </div>
  </section>

  <!-- Seasonal -->
  <section class="mx-auto mt-10 max-w-6xl space-y-4 px-6">
    <Typography variant="h2">Seasonal picks</Typography>
    <div class="grid gap-4 sm:grid-cols-2 lg:grid-cols-4">
      {
        seasonalList.map((r) => (
          <a key={r.slug} href={`/recipes/${r.slug}/`} class="block">
            <Card className="p-3 hover:shadow-sm">
              <h3 class="font-medium">{r.data.title}</h3>
            </Card>
          </a>
        ))
      }
    </div>
  </section>

  <!-- Browse by tag -->
  {tagCounts.length > 0 && (
    <section class="mx-auto mt-10 max-w-6xl space-y-4 px-6">
      <Typography variant="h2">Browse by tag</Typography>
      <div class="flex flex-wrap gap-2">
        {
          tagCounts.map(({ tag, count }) => (
            <a key={tag} href={`/recipes?tag=${tag}`}>
              <Badge variant="secondary">
                {tag} <span class="ml-1 text-zinc-500">({count})</span>
              </Badge>
            </a>
          ))
        }
      </div>
    </section>
  )}

  <!-- Greeting / i18n
  <section class="mx-auto max-w-6xl px-5 mt-12 space-y-4">
    <h1 class="text-3xl tracking-tight drop-shadow-lg">{tt("hi")}</h1>
    <p class="leading-7 drop-shadow-lg">{tt("welcome_message")}</p>
  </section> -->
</BaseLayout>
