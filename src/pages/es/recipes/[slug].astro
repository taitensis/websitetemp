---
import BaseLayout from '@/layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';
import { Badge } from '@/components/ui/badge';
import RecipeSections from '@/components/recipes/RecipeSections.tsx';

import { makeT } from '@/i18n/ui';
import { DEFAULT_LOCALE, type Locale } from '@/i18n/core';
const locale = (Astro.currentLocale ?? DEFAULT_LOCALE) as Locale;
const tt = makeT(locale);

const imageOnRight = true;

// 1) Build-time paths
export async function getStaticPaths() {
  const entries = await getCollection('recipes');
  return entries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

// 2) Page data (define `data` BEFORE using it)
const { entry } = Astro.props;
const data = entry.data as any;
const { Content } = await entry.render();

// base path for GitHub Pages
const base = import.meta.env.BASE_URL;

// derived values
const ig = data.ingredient_groups ?? [];
const st = data.steps ?? [];
const nt = data.notes ?? [];

const slugify = (s: string) =>
  s
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/(^-|-$)/g, '');

const cover = data.images?.[0]?.src ?? null;
const coverSrc = cover ? (cover.startsWith('/') ? base + cover.slice(1) : cover) : null;

const timeParts = [
  data.time?.prep ? `Prep ${data.time.prep}m` : null,
  data.time?.cook ? `Cook ${data.time.cook}m` : null,
  data.time?.total ? `Total ${data.time.total}m` : null,
].filter(Boolean);
---

<BaseLayout title={data.title} description={data.tags?.join(', ')}>
  <section class="mx-auto max-w-6xl px-5">
    <article>
      {
        coverSrc && (
          <section class="mb-8">
            {/* Mobile layout */}
            <div class="space-y-4 md:hidden">
              <h1 class="scroll-m-20 text-balance text-center text-4xl font-extrabold tracking-tight">
                {data.title}
              </h1>

              <div class="grid grid-cols-[1fr_45%] items-stretch gap-4">
                {/* Left: info + tags */}
                <div class="text-muted-foreground self-center text-sm">
                  <div class="space-y-1">
                    {typeof data.yield === 'number' && <p>For {data.yield} people</p>}
                    {data.difficulty && <p class="capitalize">Difficulty: {data.difficulty}</p>}
                    {timeParts.length > 0 && <p>{timeParts.join(' • ')}</p>}
                  </div>

                  {data.tags?.length ? (
                    <div class="mt-3 flex flex-wrap gap-2 text-[clamp(1rem,0.4vw+0.9rem,1.125rem)]">
                      <span class="sr-only">Tags</span>
                      {data.tags.map((tag: string) => (
                        <a
                          href={`${base}tags/${slugify(tag)}`}
                          class="inline-block"
                          title={`View ${tag} recipes`}
                          rel="tag"
                        >
                          <Badge variant="secondary" className="capitalize">
                            {tag}
                          </Badge>
                        </a>
                      ))}
                    </div>
                  ) : null}
                </div>

                {/* Right: image (portrait on mobile) */}
                <figure class="h-full self-stretch">
                  <div class="relative aspect-auto h-full overflow-hidden rounded-xl bg-slate-100 shadow">
                    <img
                      src={coverSrc}
                      alt={data.images?.[0]?.alt || data.title}
                      class="absolute inset-0 h-full w-full object-cover"
                      loading="lazy"
                    />
                  </div>
                </figure>
              </div>
            </div>

            {/* Desktop layout */}
            <div class="hidden md:grid md:grid-cols-2 md:items-stretch md:gap-8">
              {/* TEXT COLUMN */}
              <header class={`space-y-6 self-center ${imageOnRight ? 'md:order-1' : 'md:order-2'}`}>
                <h1 class="text-balance text-center text-[clamp(1.75rem,2.5vw+1rem,2.75rem)] font-bold">
                  {data.title}
                </h1>

                <div class="info-contain flex flex-col gap-6 pl-6">
                  {data.tags?.length ? (
                    <div class="flex flex-wrap items-center gap-2">
                      <span class="sr-only">Tags</span>
                      {data.tags.map((tag: string) => (
                        <a
                          href={`${base}tags/${slugify(tag)}`}
                          class="inline-block"
                          title={`View ${tag} recipes`}
                          rel="tag"
                        >
                          <Badge variant="secondary" className="capitalize">
                            {tag}
                          </Badge>
                        </a>
                      ))}
                    </div>
                  ) : null}

                  <div class="flex flex-col gap-2 text-sm font-medium leading-none">
                    {typeof data.yield === 'number' && <p>For {data.yield} people</p>}
                    {data.difficulty && <p class="capitalize">Difficulty: {data.difficulty}</p>}
                    {timeParts.length > 0 && <p>{timeParts.join(' • ')}</p>}
                  </div>
                </div>
              </header>

              {/* IMAGE COLUMN */}
              <figure
                class={`mx-auto w-full ${imageOnRight ? 'md:order-2' : 'md:order-1'} self-stretch`}
              >
                <div class="relative aspect-[3/4] overflow-hidden rounded-2xl bg-slate-100 shadow md:aspect-auto md:h-full">
                  <img
                    src={coverSrc}
                    alt={data.images?.[0]?.alt || data.title}
                    class="absolute inset-0 h-full w-full object-cover"
                    loading="lazy"
                  />
                </div>
              </figure>
            </div>
          </section>
        )
      }

      <RecipeSections
        client:visible
        recipeId={entry.slug}
        ingredients={ig}
        steps={st}
        notes={nt}
        nutrition={data.nutrition}
      />
    </article>
  </section>
</BaseLayout>
