---
import BaseLayout from '@/layouts/BaseLayout.astro';
import hero from '@/assets/hero.png';
import { join } from '@/lib/utils';
import { getCollection } from 'astro:content';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Typography } from '@/components/ui/typography';
import FeaturedRecipes from '@/components/FeaturedRecipes.astro';
import { Search } from 'lucide-react';
import SeasonalPicks from '@/components/SeasonalPicks.astro';
import TagCount from '@/components/TagCount.astro';
import LatestRecipes from '@/components/LatestRecipes.astro';
import { t, setLocale, DEFAULT_LOCALE, type Locale } from '@/i18n/ui';

const locale = (Astro.currentLocale ?? DEFAULT_LOCALE) as Locale;
setLocale(locale); // Set the global locale context

const base = import.meta.env.BASE_URL;
const localePrefix = locale === DEFAULT_LOCALE ? '' : `/${locale}`;
const localeBase = join(base, localePrefix);

// Gets recipes
const raw = await getCollection('recipes');
const all = raw
  .slice()
  .sort((a, b) => new Date(b.data.date as any).getTime() - new Date(a.data.date as any).getTime());

// Filters recipes based on Locale
const filtered = all.filter((r) =>
  locale === DEFAULT_LOCALE
    ? !r.data.lang || r.data.lang === DEFAULT_LOCALE
    : r.data.lang === locale
);

// *** FEATURED ***
const featuredList = filtered.filter((r) => r.data.featured).slice(0, 3);

// // *** LATEST ***
const latestList = [...filtered]
  .sort((a, b) => {
    const t = (d: unknown) => {
      const n = d ? new Date(d as any).getTime() : NaN;
      return Number.isNaN(n) ? -Infinity : n; // undated go last
    };
    return t(b.data.date) - t(a.data.date);
  })
  .slice(0, 6);

// *** SEASONAL ***
const now = new Date();
const month = now.getMonth() + 1;
const seasons = ['winter', 'spring', 'summer', 'autumn'] as const;
const season = seasons[Math.floor((month % 12) / 3)];
const seasonalList = filtered
  .filter(
    (r) => (r.data.month && r.data.month === month) || (r.data.season && r.data.season === season)
  )
  .slice(0, 4);

// *** TAGS ***
// count tags from the filtered set
const tagCountsList = Object.entries(
  filtered.reduce(
    (acc, r) => {
      for (const t of r.data.tags ?? []) {
        if (!t) continue;
        acc[t] = (acc[t] || 0) + 1;
      }
      return acc;
    },
    {} as Record<string, number>
  )
)
  // sort + limit here (component is dumb)
  .sort((a, b) => b[1] - a[1])
  .slice(0, 8);
---

<BaseLayout
  title={t('nav.home')}
  description="Welcome to Nourriture Quotidienne, a collection of everyday recipes."
  bgUrl={hero.src}
  mainClass="px-0 py-0 md:py-8"
>
  <!-- Hero Section - Enhanced with new spacing and transitions -->
  <section class="mt-lg mx-auto w-full max-w-6xl">
    <header class="text-center">
      <Typography variant="h1" className="">{t('welcome.title')}</Typography>
      <Typography variant="lead" className="my-lg">
        {t('welcome.tagline')}
      </Typography>
    </header>

    <!-- Enhanced Search Section -->
    <div class="">
      <div class="flex flex-col gap-4 sm:flex-row sm:items-center">
        <form
          action={join(localeBase, 'recipes')}
          class="flex flex-1 items-center gap-3"
          role="search"
          aria-label={t('a11y.search_recipes')}
        >
          <label for="site-search" class="sr-only">{t('a11y.search_recipes')}</label>

          <div class="relative flex-1">
            <!-- Enhanced Input with new design system colors -->
            <Input
              id="site-search"
              type="search"
              name="q"
              placeholder={t('search.search_placeholder')}
              aria-label={t('a11y.search_recipes')}
              autoComplete="on"
              className="bg-input text-foreground placeholder:text-muted-foreground hover:bg-input-hover hover:border-border-hover focus:bg-input-focus focus:border-primary focus:ring-primary/20 focus:ring-offset-background h-12 w-full rounded-xl border-2 pr-4 pl-4 text-base backdrop-blur-sm transition-all duration-200 focus:ring-2 focus:ring-offset-2"
            />
          </div>

          <!-- Enhanced Search Button -->
          <Button type="submit" variant="default" size="lg">
            <span class="hidden sm:inline">{t('actions.search')}</span>
            <span class="sm:hidden">
              <Search />
            </span>
          </Button>
        </form>
      </div>

      <!-- Enhanced Search Suggestions -->
      <div class="mt-3 text-center">
        <p
          class="text-foreground text-sm opacity-70 transition-opacity duration-200 hover:opacity-100"
        >
          {t('welcome.search_hint')}
        </p>
      </div>
    </div>
  </section>

  <!-- Featured Recipes Section -->
  <FeaturedRecipes items={featuredList} base={base} />

  <!-- Latest Recipes - Enhanced with better spacing and hover states -->
  <LatestRecipes items={latestList} base={base} />

  <!-- Seasonal Picks - Enhanced with better visual hierarchy -->
  <SeasonalPicks items={seasonalList} base={base} />

  <!-- Browse by Tags - Enhanced with better badge styling -->
  <TagCount items={tagCountsList} base={base} />
</BaseLayout>
