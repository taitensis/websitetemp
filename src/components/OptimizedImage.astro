---
import type { ImageMetadata } from 'astro';
import { getImage } from 'astro:assets';

export interface Props {
  src: string | ImageMetadata;
  alt: string;
  width?: number;
  height?: number;
  quality?: number;
  format?: 'webp' | 'avif' | 'jpeg' | 'jpg' | 'png';
  loading?: 'lazy' | 'eager';
  class?: string;
  sizes?: string;
  densities?: number[];
  widths?: number[];
}

const {
  src,
  alt,
  width,
  height,
  quality = 80,
  format = 'webp',
  loading = 'lazy',
  class: className,
  sizes = '(min-width: 768px) 50vw, 100vw',
  densities = [1, 2],
  widths = [320, 640, 960, 1280, 1920],
  ...rest
} = Astro.props;

// Handle both local assets and external URLs
const isExternalUrl = typeof src === 'string' && (src.startsWith('http') || src.startsWith('//'));

let optimizedImage;
let srcSet;

if (!isExternalUrl && typeof src !== 'string') {
  // For local images, use Astro's image optimization
  try {
    optimizedImage = await getImage({
      src,
      width,
      height,
      quality,
      format,
    });

    // Generate srcset for responsive images
    if (widths.length > 0) {
      const srcSetImages = await Promise.all(
        widths.map((w) =>
          getImage({
            src,
            width: w,
            quality,
            format,
          })
        )
      );
      srcSet = srcSetImages.map((img, i) => `${img.src} ${widths[i]}w`).join(', ');
    }
  } catch (error) {
    console.error('Error optimizing image:', error);
    // Fallback to original src
    optimizedImage = { src: typeof src === 'string' ? src : src.src };
  }
} else {
  // For external URLs, use as-is
  optimizedImage = {
    src: typeof src === 'string' ? src : src.src,
    width,
    height,
  };
}
---

<img
  src={optimizedImage.src}
  alt={alt}
  width={optimizedImage.width || width}
  height={optimizedImage.height || height}
  loading={loading}
  decoding="async"
  class={className}
  sizes={srcSet ? sizes : undefined}
  srcset={srcSet}
  {...rest}
/>

<!-- Preload critical images -->
{
  loading === 'eager' && (
    <link
      rel="preload"
      as="image"
      href={optimizedImage.src}
      imagesizes={sizes}
      imagesrcset={srcSet}
    />
  )
}
