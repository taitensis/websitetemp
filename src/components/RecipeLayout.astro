---
import BaseLayout from '@/layouts/BaseLayout.astro';
import { Badge } from '@/components/ui/badge';
import RecipeSections from '@/components/RecipeSections.tsx';
import { t, DEFAULT_LOCALE, type Locale } from '@/i18n/ui';

export interface Props {
  entry: any; // Recipe entry from Astro content
  imageOnRight?: boolean;
}

const { entry, imageOnRight = true } = Astro.props;
const data = entry.data as any;

const locale = (Astro.currentLocale ?? DEFAULT_LOCALE) as Locale;

// Base path for GitHub Pages
const base = import.meta.env.BASE_URL;

// Derived values
const ig = data.ingredient_groups ?? [];
const st = data.steps ?? [];
const nt = data.notes ?? [];

const slugify = (s: string) =>
  s
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/(^-|-$)/g, '');

const cover = data.images?.[0]?.src ?? null;
const coverSrc = cover ? (cover.startsWith('/') ? base + cover.slice(1) : cover) : null;

const timeParts = [
  data.time?.prep ? `${t('recipes.prep')} ${data.time.prep}m` : null,
  data.time?.cook ? `${t('recipes.cook')} ${data.time.cook}m` : null,
  data.time?.total ? `${t('recipes.total')} ${data.time.total}m` : null,
].filter(Boolean);

const yieldText =
  typeof data.yield === 'number' ? t('recipes.for_people', { count: data.yield }) : data.yield;

const difficultyText = data.difficulty ? `${t('recipes.difficulty')}: ${t(data.difficulty)}` : null;
---

<BaseLayout title={data.title} description={data.summary || data.tags?.join(', ')} image={coverSrc}>
  <section class="mx-auto max-w-6xl px-5">
    <article itemscope itemtype="https://schema.org/Recipe">
      <!-- Recipe Header -->
      {
        coverSrc && (
          <section class="mb-8">
            {/* Mobile layout */}
            <div class="space-y-4 md:hidden">
              <header>
                <h1
                  class="scroll-m-20 text-center text-4xl font-extrabold tracking-tight text-balance"
                  itemprop="name"
                >
                  {data.title}
                </h1>
              </header>

              <div class="grid grid-cols-[1fr_45%] items-stretch gap-4">
                {/* Left: info + tags */}
                <div class="text-muted-foreground space-y-3 self-center text-sm">
                  <div class="space-y-1">
                    {yieldText && <p itemprop="recipeYield">{yieldText}</p>}
                    {difficultyText && <p>{difficultyText}</p>}
                    {timeParts.length > 0 && (
                      <div>
                        {data.time?.total && (
                          <meta itemprop="totalTime" content={`PT${data.time.total}M`} />
                        )}
                        {data.time?.prep && (
                          <meta itemprop="prepTime" content={`PT${data.time.prep}M`} />
                        )}
                        {data.time?.cook && (
                          <meta itemprop="cookTime" content={`PT${data.time.cook}M`} />
                        )}
                        <p>{timeParts.join(' • ')}</p>
                      </div>
                    )}
                  </div>

                  {data.tags?.length && (
                    <div class="flex flex-wrap gap-2">
                      <span class="sr-only">{t('tags')}</span>
                      {data.tags.map((tag: string) => (
                        <a
                          href={`${base}tags/${slugify(tag)}`}
                          class="inline-block"
                          title={t('view_tag_recipes', { tag })}
                          rel="tag"
                        >
                          <Badge variant="secondary" className="capitalize">
                            <span itemprop="recipeCategory">{tag}</span>
                          </Badge>
                        </a>
                      ))}
                    </div>
                  )}
                </div>

                {/* Right: image */}
                <figure class="h-full self-stretch">
                  <div class="bg-muted relative aspect-auto h-full overflow-hidden rounded-xl shadow">
                    <img
                      src={coverSrc}
                      alt={data.images?.[0]?.alt || data.title}
                      class="absolute inset-0 h-full w-full object-cover"
                      loading="lazy"
                      itemprop="image"
                    />
                  </div>
                </figure>
              </div>
            </div>

            {/* Desktop layout */}
            <div class="hidden md:grid md:grid-cols-2 md:items-stretch md:gap-8">
              {/* Text Column */}
              <header class={`space-y-6 self-center ${imageOnRight ? 'md:order-1' : 'md:order-2'}`}>
                <h1
                  class="scroll-m-20 text-center text-4xl font-extrabold tracking-tight text-balance"
                  itemprop="name"
                >
                  {data.title}
                </h1>

                <div class="space-y-4">
                  {data.tags?.length && (
                    <div class="flex flex-wrap justify-center gap-2">
                      <span class="sr-only">{t('tags')}</span>
                      {data.tags.map((tag: string) => (
                        <a
                          href={`${base}tags/${slugify(tag)}`}
                          class="inline-block"
                          title={t('view_tag_recipes', { tag })}
                          rel="tag"
                        >
                          <Badge variant="secondary" className="capitalize">
                            <span itemprop="recipeCategory">{tag}</span>
                          </Badge>
                        </a>
                      ))}
                    </div>
                  )}

                  <div class="flex flex-col gap-2 text-center text-sm font-medium">
                    {yieldText && <p itemprop="recipeYield">{yieldText}</p>}
                    {difficultyText && <p>{difficultyText}</p>}
                    {timeParts.length > 0 && (
                      <div>
                        {data.time?.total && (
                          <meta itemprop="totalTime" content={`PT${data.time.total}M`} />
                        )}
                        {data.time?.prep && (
                          <meta itemprop="prepTime" content={`PT${data.time.prep}M`} />
                        )}
                        {data.time?.cook && (
                          <meta itemprop="cookTime" content={`PT${data.time.cook}M`} />
                        )}
                        <p>{timeParts.join(' • ')}</p>
                      </div>
                    )}
                  </div>
                </div>
              </header>

              {/* Image Column */}
              <figure
                class={`mx-auto w-full ${imageOnRight ? 'md:order-2' : 'md:order-1'} self-stretch`}
              >
                <div class="bg-muted relative aspect-[3/4] overflow-hidden rounded-2xl shadow md:aspect-auto md:h-full">
                  <img
                    src={coverSrc}
                    alt={data.images?.[0]?.alt || data.title}
                    class="absolute inset-0 h-full w-full object-cover"
                    loading="lazy"
                    itemprop="image"
                  />
                </div>
              </figure>
            </div>
          </section>
        )
      }

      <!-- Recipe Sections -->
      <RecipeSections
        client:visible
        recipeId={entry.slug}
        ingredients={ig}
        steps={st}
        notes={nt}
        nutrition={data.nutrition}
      />

      <!-- Hidden structured data -->
      {data.summary && <meta itemprop="description" content={data.summary} />}
      <meta itemprop="author" content="Maxime C." />
      {data.date && <meta itemprop="datePublished" content={data.date} />}
    </article>
  </section>
</BaseLayout>
